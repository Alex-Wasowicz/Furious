
Nomenclature:
b = byte
s = short
i = int
l = long
f = float
d = double
a = pointer
c = char

all           = b,s,i,l,f,d,a,c
number types  = b,s,i,l,f,d
standard grup =     i,l,f,d,a
std numbers   =     i,l,f,d
std integers  =     i,l


Hex Oracle_name Grup
                0. NOP
00  nop
                1. Push constant (not for char)
01  aconst_null
02  iconst_m1   (-1)
03  iconst_0
04  iconst_1
05  iconst_2
06  iconst_3
07  iconst_4
08  iconst_5
09  lconst_0
0A  lconst_1
0B  fconst_0
0C  fconst_1
0D  fconst_2
0E  dconst_0
0F  dconst_1
10  bipush
11  sipush
                2. Load (only for standard grup)
12  ldc
13  ldc_w       (load constant)
14  ldc2_w
15  iload
16  lload
17  fload
18  dload
19  aload
1A  iload_0
1B  iload_1
1C  iload_2
1D  iload_3
1E  lload_0
1F  lload_1
20  lload_2
21  lload_3
22  fload_0
23  fload_1
24  fload_2
25  fload_3
26  dload_0
27  dload_1
28  dload_2
29  dload_3
2A  aload_0
2B  aload_1
2C  aload_2
2D  aload_3
                3. Load from Array (for all)
2E  iaload
2F  laload
30  faload
31  daload
32  aaload
33  baload
34  caload
35  saload
                2. Store (only for standard grup)
36  istore
37  lstore
38  fstore
39  dstore
3A  astore
3B  istore_0
3C  istore_1
3D  istore_2
3E  istore_3
3F  lstore_0
40  lstore_1
41  lstore_2
42  lstore_3
43  fstore_0
44  fstore_1
45  fstore_2
46  fstore_3
47  dstore_0
48  dstore_1
49  dstore_2
4A  dstore_3
4B  astore_0
4C  astore_1
4D  astore_2
4E  astore_3
                3. Store to Array (for all)
4F  iastore
50  lastore
51  fastore
52  dastore
53  aastore
54  bastore
55  castore
56  sastore
                3. Stack manipulation (of 32bit elements)
57  pop
58  pop2
59  dup
5A  dup_x1
5B  dup_x2
5C  dup2
5D  dup2_x1
5E  dup2_x2
5F  swap
                4. Math (only for std numbers)
60  iadd
61  ladd
62  fadd
63  dadd
64  isub
65  lsub
66  fsub
67  dsub
68  imul
69  lmul
6A  fmul
6B  dmul
6C  idiv
6D  ldiv
6E  fdiv
6F  ddiv
70  irem
71  lrem
72  frem
73  drem
74  ineg
75  lneg
76  fneg
77  dneg
                4. Bit (only for std integers)
78  ishl
79  lshl
7A  ishr
7B  lshr
7C  iushr
7D  lushr
7E  iand
7F  land
80  ior
81  lor
82  ixor
83  lxor
                5. "Increment int"
84  iinc
                6. Convert (only for std numbers)
85  i2l
86  i2f
87  i2d
88  l2i
89  l2f
8A  l2d
8B  f2i
8C  f2l
8D  f2d
8E  d2i
8F  d2l
90  d2f
                7. Trim
91  i2b
92  i2c
93  i2s
                8. Compare
94  lcmp
95  fcmpl
96  fcmpg
97  dcmpl
98  dcmpg
                9. Branch (inside method)
99  ifeq
9A  ifne
9B  iflt
9C  ifge
9D  ifgt
9E  ifle
9F  if_icmpeq
A0  if_icmpne
A1  if_icmplt
A2  if_icmpge
A3  if_icmpgt
A4  if_icmple
A5  if_acmpeq
A6  if_acmpne
A7  goto
A8  jsr         (jump sub-routine)
A9  ret
AA  tableswitch
AB  lookupswitch
                10. Return from method
AC  ireturn
AD  lreturn
AE  freturn
AF  dreturn
B0  areturn
B1  return
                11. Operations on Objects
B2  getstatic
B3  putstatic
B4  getfield
B5  putfield
B6  invokevirtual
B7  invokespecial
B8  invokestatic
B9  invokeinterface
BA  invokedynamic
BB  new
                12. Operations on Arrays
BC  newarray
BD  anewarray
BE  arraylength
                13. Safety
BF  athrow
C0  checkcast
C1  instanceof
C2  monitorenter
C3  monitorexit
                14. More memory support
C4  wide
C5  multianewarray
C6  ifnull
C7  ifnonnull
C8  goto_w
C9  jsr_w
                15. Reserved
CA  breakpoint
...
FE  impdep1     (implementation defined)
FF  impdep2

